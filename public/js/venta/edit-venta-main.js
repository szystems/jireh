document.addEventListener('DOMContentLoaded', function () {
    // Variables para control de estado
    window.nuevoDetalleCount = 0; // Global para ser accesible por otros m√≥dulos si es necesario
    window.hayCambios = false;
    window.hayCambiosTrabajadores = {}; // Para rastrear cambios espec√≠ficos en trabajadores por detalle
    // Aseg√∫rate de que el DOM est√© completamente cargado y el formulario inicializado antes de serializar
    window.originalFormData = $('#forma-editar-venta').serialize();

    // Acceder a la configuraci√≥n global proporcionada por Blade
    // Estas variables DEBEN ser definidas en un <script> en tu archivo Blade antes de incluir este JS
    window.APP_CURRENCY_SYMBOL = (window.jirehVentaConfig && typeof window.jirehVentaConfig.currencySymbol !== 'undefined') ? window.jirehVentaConfig.currencySymbol : '$';
    window.APP_VEHICULO_ID_ORIGINAL = (window.jirehVentaConfig && typeof window.jirehVentaConfig.vehiculoIdOriginal !== 'undefined') ? window.jirehVentaConfig.vehiculoIdOriginal : '';
    window.APP_CSRF_TOKEN = (window.jirehVentaConfig && typeof window.jirehVentaConfig.csrfToken !== 'undefined') ? window.jirehVentaConfig.csrfToken : '';


    // Funci√≥n para formatear moneda
    window.formatCurrency = function(value) {
        const val = parseFloat(value);
        if (isNaN(val)) return window.APP_CURRENCY_SYMBOL + ' 0.00';
        return window.APP_CURRENCY_SYMBOL + ' ' + val.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&$&'); // Corregido: $& en lugar de $&,
    }

    // Funci√≥n para marcar cambios y activar advertencia de salida
    window.marcarCambio = function() {
        window.hayCambios = true;
    }

    // Inicializaci√≥n general de Select2 para elementos est√°ndar
    $('.select2').select2({
        language: {
            noResults: () => "No se encontraron resultados",
            searching: () => "Buscando..."
        },
        width: '100%',
        selectOnClose: true
    }).on('select2:open', function() {
        // Asegurar visibilidad sobre otros elementos, √∫til si hay modales u otros componentes z-indexed
        let dropdown = $(this).data('select2').$dropdown;
        if (dropdown) {
            dropdown.css('z-index', 1100);
        }
    });

    // Inicializaci√≥n de Select2 para selects dentro de modales
    $('.select2-modal').each(function() {
        $(this).select2({
            dropdownParent: $(this).closest('.modal'),
            width: '100%',
            closeOnSelect: false, // Permitir selecci√≥n m√∫ltiple sin cerrar
            language: {
                noResults: () => "No se encontraron resultados",
                searching: () => "Buscando..."
            }
        }).on('select2:open', function() {
             let dropdown = $(this).data('select2').$dropdown;
             if (dropdown) {
                dropdown.css('z-index', 1056); // Asegurar visibilidad sobre el modal
             }
        });
    });

    // Registrar cambios generales en el formulario
    $('#forma-editar-venta').on('change', 'input, select, textarea', function() {
        window.marcarCambio();
    });

    // --- ALERTA DE SALIDA ---
    window.addEventListener('beforeunload', function (e) {
        if (window.hayCambios) {
            const confirmationMessage = 'Tienes cambios sin guardar. ¬øEst√°s seguro de que quieres salir?';
            e.returnValue = confirmationMessage; // Gecko + WebKit, Safari, Chrome
            return confirmationMessage; // Gecko + WebKit, Safari, Chrome
        }
    });    // Funci√≥n para actualizar el total de la venta (definici√≥n completamente reescrita)
    window.actualizarTotalVenta = function() {
        const currencySymbol = window.APP_CURRENCY_SYMBOL || 'Q';

        // Verificar que los elementos necesarios existen
        const $totalElement = $('#total-venta');
        if (!$totalElement.length) {
            console.warn("‚ö†Ô∏è No se encontr√≥ elemento #total-venta");
            return;
        }

        console.log("üîÑ ===============================================");
        console.log("üîÑ INICIANDO C√ÅLCULO DE TOTAL DE VENTA");
        console.log("üîÑ ===============================================");

        let total = 0;
        let elementosEncontrados = 0;
        let detallesExistentesCount = 0;
        let detallesNuevosCount = 0;

        // ESTRATEGIA MEJORADA Y ROBUSTA: M√∫ltiples m√©todos para encontrar inputs de subtotal
        
        console.log("üìä PASO 1: Buscando TODOS los inputs de subtotal con m√∫ltiples estrategias...");
        
        // Estrategia 1: Selector original
        let todosLosInputsSubtotal = $('input[name*="sub_total"], input.subtotal-input, input[name*="[sub_total]"]');
        console.log(`üìä Estrategia 1 (selector original): ${todosLosInputsSubtotal.length} inputs`);
        
        // Log de todos los inputs encontrados para debugging
        if (todosLosInputsSubtotal.length > 0) {
            console.log("üìä Inputs encontrados en estrategia 1:");
            todosLosInputsSubtotal.each(function(i) {
                const $input = $(this);
                console.log(`   ${i+1}. name="${$input.attr('name')}", value="${$input.val()}", visible=${$input.is(':visible')}`);
            });
        }
        
        // Estrategia 2: Si no encuentra nada, buscar en contextos espec√≠ficos
        if (todosLosInputsSubtotal.length === 0) {
            console.log("‚ö†Ô∏è Estrategia 1 fall√≥, probando estrategia 2...");
            todosLosInputsSubtotal = $('#tabla-detalles-existentes input, #tabla-nuevos-detalles input, #nuevos-detalles input').filter(function() {
                const nombre = $(this).attr('name') || '';
                return nombre.includes('sub_total') || nombre.includes('subtotal') || $(this).hasClass('subtotal-input');
            });
            console.log(`üìä Estrategia 2 (contexto espec√≠fico): ${todosLosInputsSubtotal.length} inputs`);
        }
        
        // Estrategia 3: Si a√∫n no encuentra, buscar todos los inputs y filtrar manualmente
        if (todosLosInputsSubtotal.length === 0) {
            console.log("‚ö†Ô∏è Estrategia 2 fall√≥, probando estrategia 3 (b√∫squeda exhaustiva)...");
            const inputsEncontrados = [];
            $('input').each(function() {
                const $input = $(this);
                const nombre = $input.attr('name') || '';
                const clases = $input.attr('class') || '';
                
                if (nombre.includes('sub_total') || 
                    nombre.includes('subtotal') || 
                    clases.includes('subtotal') ||
                    nombre.match(/\[sub_total\]/) ||
                    nombre.match(/detalles\[\d+\]\[sub_total\]/) ||
                    nombre.match(/nuevos_detalles\[\d+\]\[sub_total\]/)) {
                    inputsEncontrados.push($input[0]);
                }
            });
            todosLosInputsSubtotal = $(inputsEncontrados);
            console.log(`üìä Estrategia 3 (b√∫squeda exhaustiva): ${todosLosInputsSubtotal.length} inputs`);
        }
        
        console.log(`üìä Total de inputs de subtotal encontrados: ${todosLosInputsSubtotal.length}`);
        
        todosLosInputsSubtotal.each(function(index) {
            const $input = $(this);
            const $row = $input.closest('tr');
            const inputName = $input.attr('name') || '';
            const inputValue = parseFloat($input.val()) || 0;
            
            console.log(`üìä Analizando input ${index + 1}:`, {
                name: inputName,
                value: inputValue,
                rowId: $row.attr('id') || 'sin-id',
                rowClasses: $row.attr('class') || 'sin-clases'
            });
            
            // Determinar si es un detalle existente o nuevo
            let esDetalleExistente = false;
            let esDetalleNuevo = false;
            let debeContarse = true;
            
            // Verificar si est√° en la tabla de detalles existentes
            if ($input.closest('#tabla-detalles-existentes').length > 0) {
                esDetalleExistente = true;
                console.log(`   ‚Üí Es detalle existente`);
                
                // Verificar si est√° marcado para eliminar
                const $eliminarInput = $row.find('input[name*="[eliminar]"]');
                if ($eliminarInput.length > 0 && $eliminarInput.val() === '1') {
                    debeContarse = false;
                    console.log(`   ‚Üí ‚ùå Marcado para eliminar, no se cuenta`);
                }
                
                // Verificar si la fila est√° oculta por eliminaci√≥n
                if ($row.hasClass('detalle-oculto-por-eliminacion') || $row.is(':hidden')) {
                    debeContarse = false;
                    console.log(`   ‚Üí ‚ùå Fila oculta, no se cuenta`);
                }
            }
            // Verificar si est√° en la tabla de nuevos detalles
            else if ($input.closest('#tabla-nuevos-detalles').length > 0 || inputName.includes('nuevos_detalles')) {
                esDetalleNuevo = true;
                console.log(`   ‚Üí Es detalle nuevo`);
            }
            // Si no est√° en ninguna tabla conocida, intentar determinar por el name
            else if (inputName.includes('detalles[') && !inputName.includes('nuevos_detalles')) {
                esDetalleExistente = true;
                console.log(`   ‚Üí Es detalle existente (determinado por name)`);
            }
            else {
                console.log(`   ‚Üí ‚ö†Ô∏è Tipo indeterminado, se contar√° por defecto`);
            }
            
            // Contar si debe contarse y tiene valor v√°lido
            if (debeContarse && !isNaN(inputValue) && inputValue > 0) {
                total += inputValue;
                elementosEncontrados++;
                
                if (esDetalleExistente) {
                    detallesExistentesCount++;
                    console.log(`   ‚Üí ‚úÖ Sumado como existente: ${inputValue}`);
                } else if (esDetalleNuevo) {
                    detallesNuevosCount++;
                    console.log(`   ‚Üí ‚úÖ Sumado como nuevo: ${inputValue}`);
                } else {
                    console.log(`   ‚Üí ‚úÖ Sumado como indeterminado: ${inputValue}`);
                }
            } else if (!debeContarse) {
                console.log(`   ‚Üí ‚ùå No contado (marcado para eliminar o oculto)`);
            } else if (isNaN(inputValue) || inputValue <= 0) {
                console.log(`   ‚Üí ‚ùå No contado (valor inv√°lido: ${inputValue})`);
            }
        });

        console.log("üìä ===============================================");
        console.log(`üìä RESUMEN DEL C√ÅLCULO:`);
        console.log(`üìä    Total calculado: ${total.toFixed(2)}`);
        console.log(`üìä    Elementos encontrados: ${elementosEncontrados}`);
        console.log(`üìä    Detalles existentes: ${detallesExistentesCount}`);
        console.log(`üìä    Detalles nuevos: ${detallesNuevosCount}`);
        console.log("üìä ===============================================");

        // Obtener el total actual para comparaci√≥n
        const totalActualText = $totalElement.text();
        const totalActualMatch = totalActualText.match(/[\d,]+\.?\d*/);
        const totalActual = totalActualMatch ? parseFloat(totalActualMatch[0].replace(/,/g, '')) : 0;
        
        console.log(`üìä Total actual en pantalla: ${totalActual}`);

        // PROTECCI√ìN MEJORADA: Solo preservar el total actual si claramente no hay elementos
        // pero hab√≠a un total v√°lido antes
        if (elementosEncontrados === 0 && totalActual > 0) {
            console.warn("‚ö†Ô∏è ===============================================");
            console.warn("‚ö†Ô∏è NO SE ENCONTRARON ELEMENTOS DE SUBTOTAL");
            console.warn("‚ö†Ô∏è PERO HAY UN TOTAL V√ÅLIDO EXISTENTE");
            console.warn("‚ö†Ô∏è REALIZANDO DIAGN√ìSTICO ADICIONAL...");
            console.warn("‚ö†Ô∏è ===============================================");
            
            // Diagn√≥stico adicional para entender por qu√© no se encuentran elementos
            const $tablaExistentes = $('#tabla-detalles-existentes');
            const $tablaNuevos = $('#tabla-nuevos-detalles, #nuevos-detalles');
            
            console.warn(`üîç Tabla existentes encontrada: ${$tablaExistentes.length > 0}`);
            if ($tablaExistentes.length > 0) {
                const $filasExistentes = $tablaExistentes.find('tr');
                console.warn(`üîç Filas en tabla existentes: ${$filasExistentes.length}`);
                console.warn(`üîç Inputs en tabla existentes: ${$tablaExistentes.find('input').length}`);
                
                // Mostrar algunos inputs de muestra
                $tablaExistentes.find('input').slice(0, 3).each(function(i) {
                    const $input = $(this);
                    console.warn(`üîç Input muestra ${i+1}: name="${$input.attr('name')}", value="${$input.val()}"`);
                });
            }
            
            console.warn(`üîç Tabla nuevos encontrada: ${$tablaNuevos.length > 0}`);
            if ($tablaNuevos.length > 0) {
                console.warn(`üîç Inputs en tabla nuevos: ${$tablaNuevos.find('input').length}`);
            }
            
            // Buscar todos los inputs en el DOM
            const $todosInputs = $('input');
            console.warn(`üîç Total de inputs en el DOM: ${$todosInputs.length}`);
            
            // Buscar inputs que podr√≠an ser subtotales
            let inputsPosiblesSubtotal = 0;
            $todosInputs.each(function() {
                const nombre = $(this).attr('name') || '';
                if (nombre.includes('total') || nombre.includes('sub_total') || nombre.includes('precio')) {
                    inputsPosiblesSubtotal++;
                }
            });
            console.warn(`üîç Inputs posibles subtotal: ${inputsPosiblesSubtotal}`);
            
            console.warn("‚ö†Ô∏è PRESERVANDO TOTAL ACTUAL POR SEGURIDAD");
            console.warn("‚ö†Ô∏è ===============================================");
            return;
        }

        // Formatear el total con separadores de miles
        const totalFormateado = total.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        const nuevoTextoTotal = `Total: ${currencySymbol}.${totalFormateado}`;
        
        console.log(`üìä ACTUALIZANDO TOTAL EN PANTALLA: ${nuevoTextoTotal}`);
        $totalElement.html(nuevoTextoTotal);
        
        console.log("üîÑ ===============================================");
        console.log("üîÑ C√ÅLCULO DE TOTAL COMPLETADO");
        console.log("üîÑ ===============================================");
    }

    // Calcular total inicial de la venta con m√∫ltiples intentos para asegurar precisi√≥n
    console.log("üîÑ Programando c√°lculo inicial del total...");
    
    // Funci√≥n mejorada para el c√°lculo inicial
    function calcularTotalInicial() {
        console.log("üîÑ Ejecutando c√°lculo inicial del total...");
        
        if (typeof window.actualizarTotalVenta === 'function') {
            // Verificar si hay elementos de subtotal disponibles antes de calcular
            const inputsSubtotal = $('input[name*="sub_total"], input.subtotal-input, input[name*="[sub_total]"]');
            console.log(`üîÑ Inputs de subtotal encontrados para c√°lculo inicial: ${inputsSubtotal.length}`);
            
            if (inputsSubtotal.length > 0) {
                console.log("‚úÖ Hay elementos de subtotal, procediendo con el c√°lculo");
                window.actualizarTotalVenta();
            } else {
                console.log("‚ö†Ô∏è No se encontraron elementos de subtotal en el c√°lculo inicial");
                // Intentar una vez m√°s despu√©s de un breve delay
                setTimeout(() => {
                    const inputsSubtotalRetry = $('input[name*="sub_total"], input.subtotal-input, input[name*="[sub_total]"]');
                    console.log(`üîÑ Retry - Inputs de subtotal encontrados: ${inputsSubtotalRetry.length}`);
                    if (inputsSubtotalRetry.length > 0) {
                        console.log("‚úÖ Elementos encontrados en retry, calculando total");
                        window.actualizarTotalVenta();
                    } else {
                        console.log("‚ùå No se encontraron elementos de subtotal despu√©s del retry");
                    }
                }, 1000);
            }
        } else {
            console.error("‚ùå Funci√≥n actualizarTotalVenta no est√° disponible");
        }
    }
    
    // Ejecutar el c√°lculo inicial con m√∫ltiples estrategias
    // 1. Inmediato (para casos donde todo ya est√° listo)
    setTimeout(calcularTotalInicial, 100);
    
    // 2. Despu√©s de un delay moderado (para casos donde hay algunos scripts corriendo)
    setTimeout(calcularTotalInicial, 1000);
    
    // 3. Despu√©s de un delay m√°s largo (para casos donde hay muchos scripts o datos complejos)
    setTimeout(calcularTotalInicial, 3000);
});

// üêõ FUNCI√ìN DE DEPURACI√ìN MANUAL PARA PRUEBAS
window.debugTotalManual = function() {
    console.log("üêõ ===============================================");
    console.log("üêõ DEPURACI√ìN MANUAL DEL C√ÅLCULO DE TOTALES");
    console.log("üêõ ===============================================");
    
    // 1. Verificar elementos de total
    const $totalElement = $('#total-venta');
    console.log(`üêõ Elemento total encontrado: ${$totalElement.length > 0}`);
    if ($totalElement.length > 0) {
        console.log(`üêõ Texto actual del total: "${$totalElement.text()}"`);
    }
    
    // 2. Buscar todos los inputs de subtotal
    const $allSubtotalInputs = $('input[name*="sub_total"], input.subtotal-input, input[name*="[sub_total]"]');
    console.log(`üêõ Total de inputs de subtotal encontrados: ${$allSubtotalInputs.length}`);
    
    let detalleExistente = 0;
    let detalleNuevo = 0;
    let suma = 0;
    
    $allSubtotalInputs.each(function(index) {
        const $input = $(this);
        const valor = parseFloat($input.val()) || 0;
        const nombre = $input.attr('name') || '';
        const esVisible = $input.is(':visible');
        const filaOculta = $input.closest('tr').hasClass('d-none');
        
        console.log(`üêõ Input ${index + 1}:`);
        console.log(`    Nombre: ${nombre}`);
        console.log(`    Valor: ${valor}`);
        console.log(`    Visible: ${esVisible}`);
        console.log(`    Fila oculta: ${filaOculta}`);
        
        if (esVisible && !filaOculta && valor > 0) {
            suma += valor;
            if (nombre.includes('detalles[') && !nombre.includes('nuevos_detalles')) {
                detalleExistente++;
                console.log(`    ‚Üí Clasificado como: EXISTENTE`);
            } else if (nombre.includes('nuevos_detalles')) {
                detalleNuevo++;
                console.log(`    ‚Üí Clasificado como: NUEVO`);
            } else {
                console.log(`    ‚Üí Clasificado como: INDETERMINADO`);
            }
        } else {
            console.log(`    ‚Üí No contado (visible:${esVisible}, oculto:${filaOculta}, valor:${valor})`);
        }
    });
    
    console.log("üêõ ===============================================");
    console.log(`üêõ RESUMEN:`);
    console.log(`üêõ Detalles existentes: ${detalleExistente}`);
    console.log(`üêõ Detalles nuevos: ${detalleNuevo}`);
    console.log(`üêõ Suma total: ${suma}`);
    console.log("üêõ ===============================================");
    
    // 3. Ejecutar la funci√≥n de actualizaci√≥n y comparar
    console.log("üêõ Ejecutando actualizarTotalVenta()...");
    if (typeof window.actualizarTotalVenta === 'function') {
        window.actualizarTotalVenta();
    } else {
        console.error("üêõ ‚ùå Funci√≥n actualizarTotalVenta no encontrada");
    }
    
    return {
        totalElemento: $totalElement.length > 0,
        inputsEncontrados: $allSubtotalInputs.length,
        detallesExistentes: detalleExistente,
        detallesNuevos: detalleNuevo,
        sumaCalculada: suma
    };
};
